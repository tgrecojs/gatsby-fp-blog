{"data":{"markdownRemark":{"html":"<h3>Functors round 2 -</h3>\n<p>In the first post we learned about the characteristics of <strong>functor data type</strong> and learned how to create our own version of the <code class=\"language-text\">Identity</code> functor. This post will pick up where we left off, so if you're brand new to the topic then I recommend taking a few minutes to check that out. Don't worry - the functor xPress never leaves the station until all passengers are fully informed. We'll be here when you get back, scout's honor.</p>\n<h5>Just when I thought I was out...</h5>\n<p> something is a functor it's described as <code class=\"language-text\">mappable</code>. (ex. Arrays <code class=\"language-text\">[]</code>). In the FP world we really appreciate this characteristic. Holding our data held inside of a functor gives us the ability to transform it's value without having to leave the comforts of the container that it's held in.</p>\n<h4>Now entering ..... <code class=\"language-text\">Either</code></h4>\n<p>The <code class=\"language-text\">Either</code> functor is similar to the <code class=\"language-text\">Box</code> functor from part one. After all, any given data type must abide by the <strong>functor laws</strong> for it to be deemed an actual functor but we're smart so we already knew this. As you dive deeper into functional programming, you'll find that there are a number of different types of functors. Either is a <strong>bifunctor</strong>. As the prefix <code class=\"language-text\">bi-</code> suggests, the <code class=\"language-text\">Either</code> functor actually encapsulates the functionality of two functors, <code class=\"language-text\">Left</code> and <code class=\"language-text\">Right</code>. We can think of <code class=\"language-text\">Either</code> as the parent of <code class=\"language-text\">Left</code> and <code class=\"language-text\">Right</code>.</p>\n<p><strong>30 second quiz</strong>: What's the difference between <code class=\"language-text\">Right</code> and <code class=\"language-text\">Left</code> in the code block below?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Right</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> f <span class=\"token operator\">=></span> <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fold<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inspect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Right:: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Right<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Left</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> f <span class=\"token operator\">=></span> <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fold<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inspect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Right:: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Right<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Either <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Right<span class=\"token punctuation\">,</span> Left <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Answer</strong>: If you said that <code class=\"language-text\">Left</code>'s <code class=\"language-text\">map</code> functor is simply for show and won't actually apply a functor to the it's bound value. Remember what we learned earlier? Yeah, <code class=\"language-text\">Left</code> is a shit-head, so this is pretty typical.</p>\n<p><code class=\"language-text\">Right</code> on the other hand</p>\n<p>const Either =</p>\n<p>It exists to do nothing but while <code class=\"language-text\">Right</code></p>\n<p>it's similar to <strong>all</strong> functors for that matter because i</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Right</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> f <span class=\"token operator\">=></span> <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fold<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inspect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Right:: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Left</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> f <span class=\"token operator\">=></span> <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fold<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inspect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Left:: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findColors</span> <span class=\"token operator\">=</span> name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#ff4444\"</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#3b5998\"</span><span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#fff68f\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> colors <span class=\"token operator\">?</span> <span class=\"token function\">Right</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">Left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findColors</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=></span> color<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token string\">\"no color\"</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=></span> color<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"findColors: green ==>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">findColors</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"findColors ==> red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">findColors</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Functors Round 2: "}}},"pageContext":{"pathSlug":"/functors-rd-2","prev":{"frontmatter":{"path":"/functors-part-1","title":"Functors Round 1: Functor Law Abiding Citizen","tags":["functors","functional programming","javascript"]}},"next":null}}