{"data":{"markdownRemark":{"html":"<h1>Functors Rd. 1 - A gentle intro.</h1>\n<p>What more fitting of a way to kick of the posts section of functor.xyz then with a bit on functors! Alright. Let's <em>contain</em> our excitement though - we've got some work to do. ðŸ˜Ž</p>\n<p>In this post we're going to learn what requirements must be meant in order for something to be considered a functor.</p>\n<h4>\"You can't put me in a box\"</h4>\n<p>The essence of a <strong>functor data type</strong> is that it is <code class=\"language-text\">mappable</code>. This simply means that it provides a container (or box) that we can <code class=\"language-text\">map()</code> through in order to transform values.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t\t\t\tmap(aâ†’b)\n[Box of `a`s] ------&gt; [Box of `b`s]</code></pre></div>\n<p>Hmmm.... A container that we can map through. ðŸ¤” Sounds kinda familiar, right? Well that's because it is! JavaScript's <code class=\"language-text\">Array []</code> type is a functor. Whether you've realized it or not you have been using functors all along!</p>\n<h5>Testing <code class=\"language-text\">map</code></h5>\n<p>Below we see the the functor <code class=\"language-text\">a</code> which is a single element array <code class=\"language-text\">[10]</code>. Our second functor <code class=\"language-text\">b</code> is then created using JavaScript's built-in <code class=\"language-text\">Array.prototype.map</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleIt</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> functor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> functor<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>doubleIt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> functor<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// testing equality</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>It's really that simple. If you're a skeptic like me, then you might be having a hard time buying this. Just sit tight though it will all make sense soon.</p>\n<h3>Category Theory</h3>\n<p>Functional Programming is deeply rooted in category theory - here are its basics:</p>\n<ol>\n<li>\n<p><strong>Category</strong>: A collection of objects and arrows between objects.</p>\n<ul>\n<li>Objects can be anything. * ex. <code class=\"language-text\">[{name: &#39;Tom&#39;, age: 26}]</code>, <code class=\"language-text\">[10,30]</code>, <code class=\"language-text\">[&#39;$&#39;]</code></li>\n</ul>\n</li>\n<li>\n<p><strong>morphisms</strong></p>\n<ul>\n<li>Arrays</li>\n<li>Example above | ex. <code class=\"language-text\">A âˆ’fâ†’ B</code></li>\n</ul>\n</li>\n</ol>\n<h4>Functor Laws:</h4>\n<p>There two functor laws are:</p>\n<ol>\n<li>\n<p><strong>Identity</strong>:</p>\n<ul>\n<li>id function must always <code class=\"language-text\">map</code> a functor back to the <strong>same value</strong>,</li>\n<li><code class=\"language-text\">const id = x =&gt; x;</code></li>\n<li><code class=\"language-text\">[1,2,3].map(id); // returns [1,2,3]</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Composition</strong>:</p>\n<ul>\n<li>Functors of the same type can be computed in any order and it will not effect their value.</li>\n<li><em>Given <code class=\"language-text\">g: x =&gt; y, f: y =&gt; z</code> where <code class=\"language-text\">x,y,z</code> are collection objects...</em> <strong>there must be a composition that directly <code class=\"language-text\">X â†’ Z</code></strong>.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>This composition law was the same that I was forced to learn in algebra class. It' <strong>associative</strong> meaning that the order in which it is computer does not matter. Realizing this was a big \"a-ha\" moment when studying functional programming.</p>\n</blockquote>\n<blockquote>\n<p><strong>Ex.:</strong> (f â—¦ g) â—¦ h = f â—¦ g â—¦ h = f â—¦ (g â—¦ h)</p>\n</blockquote>\n<p>Now that we know the functor laws lets apply them to another array. Below we have the following:</p>\n<ol>\n<li><code class=\"language-text\">f</code> takes an <code class=\"language-text\">x</code> and divides by <code class=\"language-text\">.5</code></li>\n<li><code class=\"language-text\">g</code> takes an <code class=\"language-text\">x</code> and multiplies by <code class=\"language-text\">16</code></li>\n<li><code class=\"language-text\">data</code> is a functor containing 4 values.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x <span class=\"token operator\">/</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">g</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// identity law</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25 === 25</span>\n\n<span class=\"token comment\">// composition law</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  functor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> functor<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Who f*ckin cares dude</h5>\n<blockquote>\n<p>Why the FUCK do I care about these stupid fucking functor laws man.... Shit is sooo FUCKING stupid.</p>\n<ul>\n<li>Majority of people reading this posts</li>\n</ul>\n</blockquote>\n<p>Maybe you're not impressed with our <code class=\"language-text\">data</code> array and the one value that it includes. functor's satisfy the <code class=\"language-text\">Identity</code> and <code class=\"language-text\">composition</code> law. Well, that's too bad but don't give up just yet.</p>\n<h4>Creating the <code class=\"language-text\">Box</code> functor</h4>\n<p>We've seen functors in action and we've learned the rules that they must abide by. Now let's create one for ourselves.</p>\n<p>The <code class=\"language-text\">Box</code> functor (often referred to as the <code class=\"language-text\">Identity</code> functor) will take a value as it's input. From there, it will return an object <code class=\"language-text\">{}</code> with a <code class=\"language-text\">map</code> method inside of it. When this <code class=\"language-text\">map</code> executes, it will apply it's input <code class=\"language-text\">fn</code> to the value inside and return it's result wrapped inside of. What's that you said? This <code class=\"language-text\">map</code> implementation sure sounds awfully familiar to JavaScript's<code class=\"language-text\"></code>Array.prototype.map`. Well, friend, <em>that's because it is</em> !</p>\n<p>Taking a look at the code snippet below we see how our <code class=\"language-text\">Box</code> function's <code class=\"language-text\">map</code> method is implemented. Cool, right?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> fn <span class=\"token operator\">=></span> <span class=\"token function\">Identity</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OurFirstFunctor <span class=\"token operator\">=</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"&#x27;../../../imgs/boring.gif\" alt=\"boring\"></p>\n<p>Alright, I get it. Let's extend this a little bit by adding some more methods, <code class=\"language-text\">fold</code> and <code class=\"language-text\">inspectValue</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">:</span> f <span class=\"token operator\">=></span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fold<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  inspectValue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Box</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// identity law</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">id</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x1 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> x2 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx2<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>trace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value:: 1</span>\nx1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>trace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value:: 1</span>\n\n<span class=\"token comment\">// composition law f(x) * g(x) = f(g(x))</span></code></pre></div>\n<h3>Wrap up</h3>\n<p>And thus conclude this intro post on functors. Hopefully you've learned something that you didn't prior to reading this.</p>\n<p>Need Improvemen? Give me a call!</p>","frontmatter":{"title":"Functors Round 1: Functor Law Abiding Citizen"}}},"pageContext":{"pathSlug":"/functors-part-1","prev":null,"next":{"frontmatter":{"path":"/functors-rd-2","title":"Functors Round 2: ","tags":["functors","functional programming","ADTs"]}}}}